@startuml OutlineTool-ProcessingFlowchart
!theme plain
title OutlineTool - Image Processing Flowchart with Tweakable Parameters

start

:Load Image from File;
note right
  **Input Validation**
  â€¢ Check file exists
  â€¢ Validate image format
  â€¢ Minimum size: 100x100 pixels
end note

if (Image loaded successfully?) then (yes)
else (no)
  :Display error message;
  stop
endif

:Convert BGR to Grayscale;
note right: **OpenCV: cvtColor()**

:Apply Binary Threshold;
note right
  **ðŸ”§ TWEAKABLE PARAMETER**
  **thresholdValue** = 127
  â€¢ Range: 0-255
  â€¢ Lower = more white pixels
  â€¢ Higher = more black pixels
end note

:Find All Contours;
note right
  **OpenCV: findContours()**
  â€¢ Mode: RETR_EXTERNAL
  â€¢ Method: CHAIN_APPROX_SIMPLE
end note

if (Contours found?) then (yes)
else (no)
  :Display "No contours found";
  stop
endif

:Select Largest Contour by Area;
note right: **Document/Lightbox Boundary**

:Approximate Contour to Polygon;
note right
  **ðŸ”§ TWEAKABLE PARAMETER**
  **polygonEpsilonFactor** = 0.02
  â€¢ Range: 0.001-0.1
  â€¢ Lower = more detailed polygon
  â€¢ Higher = simpler polygon
  **Formula: epsilon = factor Ã— perimeter**
end note

if (Polygon has 4 corners?) then (yes)
else (no)
  :Display "Expected 4 corners" error;
  stop
endif

:Identify Corner Order;
note right
  **Corner Detection Algorithm**
  â€¢ Top-left: min(x+y)
  â€¢ Top-right: min(y-x)  
  â€¢ Bottom-right: max(x+y)
  â€¢ Bottom-left: max(y-x)
end note

:Calculate Perspective Transform;
note right
  **ðŸ”§ TWEAKABLE PARAMETERS**
  **warpSize** = 3240 pixels
  **realWorldSizeMM** = 162.0 mm
  
  **Pixels Per MM** = warpSize / realWorldSizeMM
  **Default: 20 pixels/mm**
end note

:Apply Perspective Warp to Square;
note right
  **OpenCV: warpPerspective()**
  â€¢ Maps 4 corners to square
  â€¢ Corrects perspective distortion
  â€¢ Normalizes image size
end note

:Invert Image (Object â†’ White);
note right: **Prepare for morphology**

:Apply Morphological Opening;
note right
  **ðŸ”§ TWEAKABLE PARAMETER**
  **noiseKernelSize** = 21
  â€¢ Range: 3-51 (odd numbers)
  â€¢ Smaller = less noise removal
  â€¢ Larger = more aggressive cleaning
  **Shape: Elliptical kernel**
end note

:Apply Morphological Closing;
note right: **Same kernel as opening**

:Dilate Image (4 iterations);
note right
  **Expand object boundaries**
  â€¢ Makes contours more solid
  â€¢ Fills small gaps
end note

:Apply Gaussian Blur;
note right
  **ðŸ”§ TWEAKABLE PARAMETER**
  **blurSize** = 101
  â€¢ Range: 3-201 (odd numbers)
  â€¢ Smaller = less smoothing
  â€¢ Larger = more smoothing
  **Creates smooth boundaries**
end note

:Apply Final Binary Threshold;
note right
  **ðŸ”§ TWEAKABLE PARAMETER**
  **thresholdValue** = 127
  â€¢ Same as initial threshold
  â€¢ Converts blurred image to binary
end note

:Find Object Contours;
note right
  **Second contour detection**
  â€¢ On cleaned image
  â€¢ Object should be main contour
end note

if (Object contours found?) then (yes)
else (no)
  :Display "No object found";
  stop
endif

:Select Largest Object Contour;
note right: **Main object identification**

:Convert Pixels to Millimeters;
note right
  **Coordinate Transformation**
  **For each point (x,y):**
  â€¢ x_mm = x / pixelsPerMM
  â€¢ y_mm = y / pixelsPerMM
end note

:Create DXF Polyline;
note right
  **DXF Properties**
  â€¢ Layer: "Default"
  â€¢ Color: 256 (by layer)
  â€¢ Flags: 1 (closed)
  â€¢ Elevation: 0.0
  â€¢ Thickness: 0.0
end note

:Write DXF File;
note right
  **libdxfrw Library**
  â€¢ Version: AC1015 (AutoCAD 2000)
  â€¢ Binary: false (ASCII format)
end note

if (DXF write successful?) then (yes)
  :Display success message;
else (no)
  :Display write error;
endif

stop

@enduml