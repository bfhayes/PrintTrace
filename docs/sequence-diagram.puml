@startuml OutlineTool-ProcessingSequence
!theme plain
title OutlineTool - Image Processing Sequence

actor User
participant "main()" as Main
participant "ImageProcessor" as IP
participant "DXFWriter" as DXF
participant "OpenCV" as CV
participant "libdxfrw" as LIB

User -> Main : ./OutlineTool -i image.jpg -o output.dxf
activate Main

Main -> Main : parseArguments()
Main -> Main : validate input file exists

Main -> IP : processImageToContour(inputPath, params)
activate IP

IP -> IP : loadImage(inputPath)
IP -> CV : imread(path)
activate CV
CV --> IP : Mat image
deactivate CV

IP -> IP : convertToGrayscale(image)
IP -> CV : cvtColor(image, gray, COLOR_BGR2GRAY)
activate CV
CV --> IP : Mat grayscale
deactivate CV

IP -> IP : thresholdImage(grayscale, threshold)
IP -> CV : threshold(gray, binary, thresh, 255, THRESH_BINARY)
activate CV
CV --> IP : Mat binary
deactivate CV

IP -> IP : findLargestContour(binary)
IP -> CV : findContours(binary, contours, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE)
activate CV
CV --> IP : vector<vector<Point>> contours
deactivate CV
IP -> IP : select largest by area

IP -> IP : approximatePolygon(contour, epsilon)
IP -> CV : approxPolyDP(contour, approx, epsilon, true)
activate CV
CV --> IP : vector<Point> approx (4 corners)
deactivate CV

IP -> IP : warpImage(binary, approx, size, realWorldMM)
IP -> CV : getPerspectiveTransform(corners, dstPts)
activate CV
CV --> IP : Mat transformMatrix
deactivate CV
IP -> CV : warpPerspective(binary, warped, matrix, size)
activate CV
CV --> IP : Mat warped, double pixelsPerMM
deactivate CV

IP -> IP : removeNoise(warped, kernelSize, blurSize)
IP -> CV : morphologyEx + GaussianBlur + threshold
activate CV
CV --> IP : Mat cleaned
deactivate CV

IP -> IP : findMainContour(cleaned)
IP -> CV : findContours + select largest
activate CV
CV --> IP : vector<Point> objectContour
deactivate CV

IP --> Main : vector<Point> contour
deactivate IP

Main -> Main : calculate pixelsPerMM
Main -> DXF : saveContourAsDXF(contour, pixelsPerMM, outputPath)
activate DXF

DXF -> DXF : create dxfRW instance
DXF -> DXF : create DXFWriter instance
DXF -> DXF : addContour(contour)
note right : converts pixels to mm

DXF -> LIB : dxf.write(&writer, version, binary)
activate LIB
DXF -> DXF : writeEntities()
DXF -> LIB : dxfWriter.writeLWPolyline(&polyline)
LIB --> DXF : success/failure
deactivate LIB

DXF --> Main : bool success
deactivate DXF

alt success
    Main -> User : "[SUCCESS] Conversion completed!"
else failure
    Main -> User : "[ERROR] Failed to save DXF file"
end

deactivate Main

@enduml